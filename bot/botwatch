#!/usr/bin/env python3 -u

import os
import sys
import json
import time
import argparse

curdir = os.path.dirname(os.path.realpath(__file__))
clib = os.getenv("CRYPTO_LIB", os.path.join(curdir, "../libs"))
sys.path.append(clib)

import cryptolib
from bittrex import Bittrex
from coinwatch import CoinWatch
from traderbot import TraderBot
from bittrexexchange import BittrexExchange
from bson.objectid import ObjectId

# parser.add_argument("-sl", "--sell", nargs=1, help="create sell order")
# parser.add_argument("-q", "--qty", nargs=1, type=int, default=None, help="sell quantity")
# parser.add_argument("-oa", "--order-amount", nargs=1, type=int, default=None, help="sell quantity")

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='cmd', help='sub-command help')

cancel_parser = subparsers.add_parser('cancel', help='cancel order')
cancel_parser.add_argument("-o", "--order-id", type=str, required=True, help="order-id")

sell_parser = subparsers.add_parser('sell', help='watchlist')
sell_parser.add_argument("-q", "--qty", type=int, required=True, help="quantity")
sell_parser.add_argument("-a", "--amount", type=float, required=True, help="amount")
sell_parser.add_argument("-m", "--market", type=str, required=True, help="market")

list_parser = subparsers.add_parser('list', help='watchlist')
list_parser.add_argument("-w", "--watch", action="store_true", help="show watchlist")
list_parser.add_argument("-o", "--orders", action="store_true", help="show orders")
list_parser.add_argument("-od", "--order-details", help="show order details")
list_parser.add_argument("-p", "--pending", action="store_true", help="show pending orders")

tag_parser = subparsers.add_parser('tag', help='add tag to watchlist')
tag_parser.add_argument("-t", "--tag", required=True, help="watchlist item id")
tag_parser.add_argument("-k", "--key", required=True, help="tag key name")
tag_parser.add_argument("-v", "--value", required=True, help="tag value")


add_parser = subparsers.add_parser('add', help='add to watchlist')
add_parser.add_argument("-m", "--market", required=True, help="market")
add_parser.add_argument("-e", "--exchange", required=True, help="market")

remove_parser = subparsers.add_parser('remove', help='remove from watchlist')
remove_parser.add_argument("-m", "--market", required=True, help="market")
remove_parser.add_argument("-e", "--exchange", required=True, help="market")

cancel_parser = subparsers.add_parser('cancel', help='cancel order')
cancel_parser.add_argument("-o", "--order-id", required=True, help="list watched markets")

"""
wl_parser = subparsers.add_parser('watch', help='watchlist')
wl_parser.add_argument("-l", "--list", action='store_true', help="list watched markets")
wl_parser.add_argument("-a", "--add", nargs='?', help="add new market to watch list")
wl_parser.add_argument("-e", "--exchange", help="add exchange")
wl_parser.add_argument("-c", "--candlesize", default='15m', help="moniter candlesize")
wl_parser.add_argument("-r", "--remove", nargs='+',  help="remove market to watch list")

o_parser = subparsers.add_parser('order', help='place market order')
o_parser.add_argument('-t', '--type', choices=['buy','sell'], help='order type')
o_parser.add_argument('-p', '--price', help='price to place order for')
o_parser.add_argument('-q', '--qty', help='quantity to sell')
o_parser.add_argument('-m', '--market', help='selected market')
"""

args = parser.parse_args()

cw = CoinWatch()
bittrex_exchange = BittrexExchange()

if args.cmd == "add":
    ret = cw.updateWatch({"name": args.market, "exchange": args.exchange})
    if ret.raw_result['ok']:
        print("{} / {} updated".format(args.market, args.exchange))
        watchlist = cw.loadWatchList()
        cw.tableize(watchlist)

elif args.cmd == "remove":
    ret = cw.removeWatch(args.market, args.exchange)
    if ret.raw_result['ok']:
        print("{} / {} removed".format(args.market, args.exchange))
        watchlist = cw.loadWatchList()
        cw.tableize(watchlist)

elif args.cmd == "tag":
    watch = list(cw.loadWatchList({"_id": ObjectId(args.tag)}))
    if len(watch) == 1:
        watch[0][args.key] = args.value
        cw.updateWatch(watch[0])

        watchlist = cw.loadWatchList()
        cw.tableize(watchlist)

elif args.cmd == "cancel":

    if cw.cancelOrder(args.order_id):
        print("order {} cancelled successfully".format(args.order_id))
    else:
        print("cancel failed")


elif args.cmd == "sell":
    
    orders = cw.parse()
    for order in orders:
        if order["market"] == args.market:
            if order["qty"] >= args.qty:
                print("creating order to sell {} of {} for {}".format(args.qty, args.market, args.amount))
                bot = TraderBot(name="{}-watch".format(args.market), config={"market": args.market})
                bot.wallet.exchange = bittrex_exchange
                orderObj = bot.wallet.sell(buydata={
                    "id": "manual",
                    "market": args.market,
                    "price": order["price"],
                    "qty": args.qty
                    }, price=float(args.amount))

                cw.tableize([orderObj])
                found = True
            else:
                print("can't sell more ( {} )than you have {}".format(args.qty,arder["market"]))

elif args.cmd == "list":
    if args.watch:
        print("Watchlist:")
        watchlist = cw.loadWatchList()
        cw.tableize(watchlist)

    if args.orders:
        print("Orders:")
        orders = cw.parse()
        cw.tableize(orders)

    if args.order_details:
        print("Orders: {}".format(args.order_details))
        orders = cw.parse(args.order_details)
        totalQty = 0
        cost = 0
        for order in orders:
            if order['OrderType'] == "LIMIT_SELL":
                totalQty -= order["Quantity"]
            else:
                totalQty += order["Quantity"]

            if totalQty == 0:
                cost = 0
            else:
                cost += order["Price"]

            order["QuantityTotal"] = totalQty
            if totalQty > 0:
                order["AvgPricePerUnit"] = "{:.08f}".format(cost / totalQty)
            else:
                order["AvgPricePerUnit"] = 0

        cw.tableize(orders)

    if args.pending:
        print("Pending Orders:")
        pending = cw.parsePending()
        cw.tableize(pending)
            # cw.tablei

elif args.cmd == "cancel":
    print("cancel")

"""
if args.cmd == "cancel":
    if cw.cancelOrder(args.order_id):
        print("cancelled successfully")
    else:
        print("cancel failed")

if args.cmd == "watch":
    if args.remove:
        for m in args.remove:
            cw.removeWatch(m)
            print("removed {} from watch list".format(m))
    elif args.add:
        for m in args.add:
            print(m)
            # cw.updateWatch(m)
            # print("added {} to watch list".format(m))
    elif args.list:
        openOrders = cw.parse()
        print("Open Orders:")
        cw.tableize(openOrders)
        res = cw.loadWatchList()
        ml = []
        print("\nPending Orders")
        cw.tableize(cw.parsePending())
        print("\nWatch List:")
        for i in res:
            ml.append(i["name"])
        print("{}".format(", ".join(ml)))

elif args.cmd == "order":
    summary = cw.parse()
    found = False
    for mkt in summary:
        if mkt["market"] == args.market:

            if args.type == "buy":
                pass
            elif args.type == "sell":
                price = mkt["ask"]
                qty = mkt["qty"]

                if args.price is not None:
                    price = float(args.price)

                if args.qty is not None:
                    qty = float(args.qty)

                if qty > float(mkt["qty"]):
                    qty = float(mkt["qty"])

                bot = TraderBot(name="{}-watch".format(mkt["market"]), config={"market": mkt["market"]})
                bot.wallet.exchange = bittrex_exchange
                orderObj = bot.wallet.sell(buydata={
                    "id": "manual",
                    "market": mkt["market"],
                    "price": mkt["price"],
                    "qty": qty
                    }, price=float(price))

                cw.tableize([orderObj])
                found = True

    if not found:
        print("nothing to sell")

"""
